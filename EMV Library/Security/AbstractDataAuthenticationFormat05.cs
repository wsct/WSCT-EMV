using System;
using System.Collections.Generic;
using System.Text;

using WSCT.Helpers;

using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;

namespace WSCT.EMV.Security
{
    /// <summary>
    /// Represents an EMV Data Authentication (Data Format: 05)
    /// </summary>
    /// <remarks>Format used for DDA and CDA</remarks>
    public abstract class AbstractDataAuthenticationFormat05 : AbstractSignatureContainer
    {
        #region >> Fields

        private Byte[] _iccDynamicData;

        private Byte[] _padPattern;

        #endregion

        #region >> Properties

        /// <summary>
        /// ICC Dynamic Data Length: Identifies the length of the ICC Dynamic Data in bytes
        /// </summary>
        public Byte iccDynamicDataLength
        {
            get { return _recovered[3]; }
        }

        /// <summary>
        /// ICC Dynamic Data (LDD):  Dynamic data generated by and/or stored in the ICC
        /// </summary>
        public Byte[] iccDynamicData
        {
            get
            {
                if (_iccDynamicData == null)
                {
                    _iccDynamicData = new Byte[iccDynamicDataLength];
                    Array.Copy(_recovered, 4, _iccDynamicData, 0, iccDynamicDataLength);
                }
                return _iccDynamicData;
            }
        }

        /// <summary>
        /// Pad Pattern (NIC - LDD - 25): (NIC - LDD - 25) padding bytes of value 'BB'
        /// </summary>
        public Byte[] padPattern
        {
            get
            {
                if (_padPattern == null)
                {
                    _padPattern = new Byte[keyLength - iccDynamicDataLength - 25 - 1];
                    Array.Copy(_recovered, 5 + iccDynamicDataLength, _padPattern, 0, keyLength - iccDynamicDataLength - 25 - 1);
                }
                return _padPattern;
            }
        }

        #endregion

        #region >> Constructors

        /// <summary>
        /// Default constructor
        /// </summary>
        public AbstractDataAuthenticationFormat05()
            : base(2)
        {
        }

        #endregion

        /// <inheritdoc />
        public override string ToString()
        {
            StringBuilder s = new StringBuilder();
            s.AppendFormat("Header:[{0:X2}] ", dataHeader);
            s.AppendFormat("Format:[{0:X2}] ", dataFormat);
            s.AppendFormat("Hash Algorithm:[{0:X2}] ", hashAlgorithmIndicator);
            s.AppendFormat("ICC Dynamic Data Length:[{0:X2}] ", iccDynamicDataLength);
            s.AppendFormat("ICC Dynamic Data:[{0}] ", iccDynamicData.toHexa('\0'));
            s.AppendFormat("Pad:[{0}] ", padPattern.toHexa('\0'));
            s.AppendFormat("Hash:[{0}] ", hashResult.toHexa('\0'));
            s.AppendFormat("Trailer:[{0:X2}] ", dataTrailer);

            return s.ToString();
        }
    }
}
