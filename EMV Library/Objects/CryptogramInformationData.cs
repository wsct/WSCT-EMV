using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using WSCT.EMV;
using WSCT.Helpers.BasicEncodingRules;

namespace WSCT.EMV.Objects
{
    /// <summary>
    /// Represents the Cryptogram Information Data of a cryptogram generated by an EMV card
    /// </summary>
    public class CryptogramInformationData : BinaryTLVObject
    {
        #region >> Internal constants

        const byte ADVICE_REQUIRED = 0x08;

        const byte REASON_NOINFORMATIONGIVEN = 0x00;
        const byte REASON_SERVICENOTALLOWED = 0x01;
        const byte REASON_PINTRYLIMITEXCEEDED = 0x02;
        const byte REASON_ISSUERAUTHENTICATIONFAILED = 0x03;

        #endregion

        #region >> Properties

        /// <summary>
        /// CID: Cryptogram Type
        /// </summary>
        public CryptogramType cryptogramType
        {
            get { return (CryptogramType)(tlv.value[0] & 0xC0); }
        }

        /// <summary>
        /// CID: Advice Required
        /// </summary>
        public Boolean adviceRequired
        {
            get { return test(0, ADVICE_REQUIRED); }
            set { force(0, ADVICE_REQUIRED, value); }
        }

        /// <summary>
        /// CID: reason / advice code
        /// </summary>
        public Byte reasonCode
        {
            get { return (Byte)(tlv.value[0] & 0x07); }
        }

        /// <summary>
        /// CID: Reason - no information given
        /// </summary>
        public Boolean reasonNoInformationGiven
        {
            get { return (reasonCode & REASON_NOINFORMATIONGIVEN) == REASON_NOINFORMATIONGIVEN; }
        }

        /// <summary>
        /// CID: Reason - service not allowed
        /// </summary>
        public Boolean reasonServiceNotAllowed
        {
            get { return (reasonCode & REASON_SERVICENOTALLOWED) == REASON_SERVICENOTALLOWED; }
        }

        /// <summary>
        /// CID: Reason - PIN try limit exceeded
        /// </summary>
        public Boolean reasonPINTryLimitExceeded
        {
            get { return (reasonCode & REASON_PINTRYLIMITEXCEEDED) == REASON_PINTRYLIMITEXCEEDED; }
        }

        /// <summary>
        /// CID: Reason - IssuerAuthenticationFailed
        /// </summary>
        public Boolean reasonIssuerAuthenticationFailed
        {
            get { return (reasonCode & REASON_ISSUERAUTHENTICATIONFAILED) == REASON_ISSUERAUTHENTICATIONFAILED; }
        }

        #endregion

        #region >> Constructors

        /// <summary>
        /// Default constructor
        /// </summary>
        public CryptogramInformationData()
            : base()
        {
            tlv = new TLVData();
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="tlvCID">TLV CID data</param>
        public CryptogramInformationData(TLVData tlvCID)
            : this()
        {
            tlv = tlvCID;
        }

        #endregion

        #region >> Methods

        Boolean test(byte byteNumber, byte bit)
        {
            if (tlv.value.Length == 0)
                tlv.value = new Byte[5];
            return (tlv.value[byteNumber] & bit) == bit;
        }

        void force(byte byteNumber, byte bit, Boolean value)
        {
            if (tlv.value.Length == 0)
                tlv.value = new Byte[5];
            if (value)
                tlv.value[byteNumber] |= bit;
            else
                tlv.value[byteNumber] &= (byte)(~bit);
        }

        /// <inheritdoc />
        public override string ToString()
        {
            String s = "";
            s += String.Format("{0}", cryptogramType);
            if (reasonNoInformationGiven)
                s += " (no information given)";
            else if (reasonServiceNotAllowed)
                s += " (service not allowed)";
            else if (reasonPINTryLimitExceeded)
                s += " (PIN try limit exceeded)";
            else if (reasonIssuerAuthenticationFailed)
                s += " (issuer authentication failed)";
            else
                s += String.Format(" (reason:{0})", reasonCode);
            return s;
        }

        #endregion
    }
}
